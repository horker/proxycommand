Set-StrictMode -Version 3

$GUID = "f482a1af-fdd3-4548-9b56-58149d54ce21"
$PROXY_COMMAND = "$PSScriptRoot\cmdproxy.exe"

function Set-ProxyCommand {
  param(
    [string]$Proxy,
    [string]$Target,
    [bool]$Async = $false
  )

  if ($TargetPath -match "\.bat$") {
    Set-ProxyBatchFile $Proxy $Target
  }
  else {
    Set-ProxyExecutable $Proxy $Target $Async
  }
}

function Set-ProxyExecutable {
  param(
    [string]$Proxy,
    [string]$Target,
    [bool]$Async
  )

  if ([IO.Directory]::Exists($Proxy)) {
    $Proxy = Join-Path $Proxy (Split-Path -Leaf $Target)
  }

  Copy-Item $PROXY_COMMAND $Proxy -Force
  $Target | Set-Content -Encoding Unicode $Proxy -Stream TargetPath

  if ($Async) {
    "true" | Set-Content -Encoding Unicode $Proxy -Stream Async
  }
}

function Set-ProxyBatchFile {
  param(
    [string]$Proxy,
    [string]$Target
  )

  if ([IO.Directory]::Exists($Proxy)) {
    $Proxy = Join-Path $Proxy (Split-Path -Leaf $Target)
  }

  $template = @"
@echo off
rem nugetid: $GUID
rem generated by New-ProxyCommand on $((Get-Date).ToString("yyyy/MM/dd HH:mm:ss"))
"$Target" %*
"@

  $template | Set-Content -Encoding default $Proxy
}

function Test-Stream {
  param(
    [string]$Path,
    [string]$StreamName
  )

  try {
    $null = Get-Content $Path -Stream $StreamName
    return $true
  }
  catch {
    return $false
  }
}

function New-ProxyCommand {
  param(
    [Parameter(Position=0, Mandatory=$true)]
    [string]$ProxyPath,

    [Parameter(Position=1, ValueFromPipeline=$true, Mandatory=$true)]
    [string]$TargetPath,

    [Parameter(Position=2, Mandatory=$false)]
    [switch]$Async
  )

  begin {
    $ProxyPath = try { Resolve-Path $ProxyPath -EA Stop } catch { $_.TargetObject }
  }

  process {
    if ([IO.Directory]::Exists($TargetPath)) {
      $files = Get-ChildItem $TargetPath | where { $_.Extension -match "\.(exe|bat)$" }
      foreach ($f in $files) {
        Set-ProxyCommand $ProxyPath $f $Async
      }
    }
    else {
      if ($TargetPath -match "\.bat$") {
        Set-ProxyBatchFile $ProxyPath $TargetPath
      }
      else {
        Set-ProxyExecutable $ProxyPath $TargetPath $Async
      }
    }
  }
}

function Show-ProxyCommand {
  param(
    [Parameter(Position=0, Mandatory=$true)]
    [string[]]$Path
  )

  foreach ($p in $Path) {
    $files = Get-ChildItem $p | where { $_.Extension -match "\.(exe|bat)$" }
    foreach ($f in $files) {
      if ($f.Extension -match "\.exe$") {
        if (Test-Stream $f.FullName "TargetPath") {
          $t = Get-Content $f.FullName -Stream "TargetPath"
          $a = Test-Stream $f.FullName "Async"
          [PSCustomObject]@{
            Name = $f.Name
            FullName = $f.FullName
            TargetPath = $t
            Async = $a
          }
        }
      }
      else {
        $content = Get-Content -Total 4 $f.FullName
        if ($content -match $GUID) {
          $m = ([regex]'^"([^"]+)"').Match($content[3])
          [PSCustomObject]@{
            Name = $f.Name
            FullName = $f.FullName
            TargetPath = $m.Groups[1].Value
          }
        }
      }
    }
  }
}
